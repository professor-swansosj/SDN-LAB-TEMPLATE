name: Sync Lab Standards
on:
  workflow_dispatch:
    inputs:
      repos:
        description: "Comma-separated list like org/Lab1,org/Lab2"
        required: true
jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout standards repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Python deps
        run: pip install jinja2 pyyaml

      - name: Setup Node (for markdownlint-cli2)
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Install markdownlint-cli2
        run: npm i -g markdownlint-cli2

      - name: Check gh CLI
        run: gh --version

      - name: Sync loop
        env:
            GH_TOKEN: ${{ secrets.GH_PAT_REPO_SCOPE }}
            REPOS: ${{ github.event.inputs.repos }}
        run: |
            set -euo pipefail
            IFS=',' read -ra LIST <<< "$REPOS"
            for R in "${LIST[@]}"; do
            echo "::group::Sync -> $R"
            rm -rf target
            gh repo clone "$R" target -- --depth=1 -q

            # copy style files (including dotfiles)
            rsync -a style/ target/

            # also copy the drift guard workflow into the lab
            mkdir -p target/.github/workflows
            cp -f .github/workflows/verify-docs.yml target/.github/workflows/ || true


            if [ -f target/lab.yml ]; then
                python3 scripts/render.py target/lab.yml target
            else
                echo "No lab.yml in $R â€” skipping render"
                echo "::endgroup::"
                continue
            fi

            # lint (do not fail job on lint errors)
            (cd target && npx markdownlint-cli2 "**/*.md" "!**/*TEMPLATE.md" || true)

            BASE_BRANCH=$(gh api repos/$R --jq .default_branch)

            pushd target >/dev/null
            git checkout -b chore/sync-standards || true

            # only add files that exist
            git add README.md INSTRUCTIONS.md || true
            [ -f .markdownlint.json ] && git add .markdownlint.json || true
            [ -f .markdownlintignore ] && git add .markdownlintignore || true
            [ -f .prettierrc.yml ] && git add .prettierrc.yml || true
            [ -f .github/workflows/verify-docs.yml ] && git add .github/workflows/verify-docs.yml || true


            if git diff --cached --quiet; then
                echo "No changes to commit for $R"
                else
                git -c user.name='standards-bot' -c user.email='bot@example.com' commit -m 'chore: sync lab standards'

                # Clean any stray uncommitted files (e.g., from npx) so gh won't complain
                git reset --hard HEAD

                # Use the PAT for pushes
                git remote set-url origin "https://x-access-token:${GH_TOKEN}@github.com/${R}.git"

                git push --set-upstream origin chore/sync-standards -f

                # Be explicit about the head branch to avoid "push first" warnings
                gh pr create \
                    --head chore/sync-standards \
                    --base "$BASE_BRANCH" \
                    --title "chore: sync lab standards" \
                    --body "Automated update from SDN-LAB-TEMPLATE"
                fi
            popd >/dev/null
            echo "::endgroup::"
            done



